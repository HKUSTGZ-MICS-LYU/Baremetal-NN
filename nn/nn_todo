
/*
 * ====== Math Functions ======
 */
void nn_initMatrix(Matrix *m, size_t rows, size_t cols) {
  m->rows = rows;
  m->cols = cols;
  m->data = malloc(rows * cols * sizeof(float));
}

void nn_concatenate(Matrix *out, Matrix *a, Matrix *b) {
  for (size_t i = 0; i < a->cols; i += 1) {
    out->data[i] = a->data[i];
  }
  for (size_t i = 0; i < b->cols; i += 1) {
    out->data[a->cols + i] = b->data[i];
  }
}

size_t nn_argmax(Matrix *a) {
  int max_index = 0;
  float max_value = a->data[0];
  for (size_t i = 1; i < a->cols; i += 1) {
    if (a->data[i] > max_value) {
      max_index = i;
      max_value = a->data[i];
    }
  }
  return max_index;
}

/*
 * ====== Operators ======
 */

void nn_logSoftmax(Matrix *out, Matrix *a) {
  float sum = 0;
  for (size_t i = 0; i < a->cols; i += 1) {
    sum += exp(a->data[i]);
  }
  for (size_t i = 0; i < a->cols; i += 1) {
    out->data[i] = log(exp(a->data[i]) / sum);
  }
}

