#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

#include "nn.h"
#include "nn_int32.h"



#define N     1
#define DIM   8

typedef struct {
  Tensor *W1;
  Tensor *b1;
  Tensor *W2;
  Tensor *b2;
} Model;


void loadWeights(Model *model) {
  size_t input_dim = 3;
  size_t hidden1_dim = 2;
  size_t hidden2_dim = 2;
  size_t output_dim = 1;

  model->W1 = NN_tensor(DTYPE_INT32, 2, (size_t[]){hidden1_dim, input_dim});
  model->b1 = NN_tensor(DTYPE_INT32, 2, (size_t[]){hidden1_dim, 1});
  model->W2 = NN_tensor(DTYPE_INT32, 2, (size_t[]){output_dim, hidden2_dim});
  model->b2 = NN_tensor(DTYPE_INT32, 2, (size_t[]){output_dim, 1});

  int W1_data[] = {
      1, 2, 3,
      -1, -2, -3,
    };
  memcpy(model->W1->data, W1_data, model->W1->stride[model->W1->ndim]);

  int b1_data[] = {
      2, 
      8,
    };
  memcpy(model->b1->data, b1_data, model->b1->stride[model->b1->ndim]);

  int W2_data[] = {
      1, 2,
      -1, -2,
    };
  memcpy(model->W2->data, W2_data, model->W2->stride[model->W2->ndim]);

  int b2_data[] = {
      2, 
    };
  memcpy(model->b2->data, b2_data, model->b2->stride[model->b2->ndim]);
}

void forward(Model *model, Tensor *x) {
  Tensor *hidden1 = NN_ReLU_INT32(NN_add_INT32(NN_matmul_INT32(model->W1, x), model->b1));
  Tensor *hidden2 = NN_ReLU_INT32(NN_add_INT32(NN_matmul_INT32(model->W2, hidden1), model->b2));
  NN_printf(hidden2);
}

int main() {
  Model model;

  loadWeights(&model);

  Tensor *x = NN_tensor(DTYPE_INT32, 2, (size_t[]){DIM, DIM});
  
  // for (size_t n = 0; n < N; ++n) {
    for (size_t i=0; i<DIM; ++i) {
      for (size_t j=0; j<DIM; ++j) {
        ((int32_t *)x->data)[i*DIM+j] = i;
      }
    }
  // }

  NN_printf(x);

  // forward(&model, x);

  return 0;
}
